import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
public class Pro3_vedrines {
	
	//declaration of buffered reader -> object that will read in the user input
	public static BufferedReader cin = new BufferedReader (new InputStreamReader ( System.in ) );
	
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		
		//object declaration
		Polynomial P = new Polynomial();
		SteepestDescent SD = new SteepestDescent();

		//The while loop will run until the quit function is called
		while (true) {
			display_menu();
			
			System.out.print( "Enter choice: ");
			//reading in a string
			String option = cin.readLine();	
			
			//Quit function
			if (option.equals("Q") == true || option.equals("q") == true ) {
				Quit();
				break;
			}
			
			//Calling for polynomial parameters
			else if (option.equals("E") == true || option.equals("e") == true) {	
				getPolynomialDetails(P);
			}
			
			//printing the polynomial parameters
			else if (option.equals("F") == true || option.equals("f") == true) {
				P.print();
			}
			
			//Calling for steepest descent parameters
			else if (option.equals("S") == true || option.equals("s") == true) {
				SD.getParamsUser (P.getN());
			}
			
			//printing the steepest descent parameters
			else if (option.equals("P") == true || option.equals("p") == true) {
				SD.print();
			}
			
			//Running steepest descent
			else if (option.equals("R") == true || option.equals("r") == true) {
				SD.run(P);
			}
			
			//Printing the last line (the result) of running the steepest descent
			else if (option.equals("D") == true || option.equals("d") == true) {
				SD.printResults(true);
			}
			
			//If something else is inputed, an error message is returned
			else {
				System.out.print("\n" + "ERROR: Invalid menu choice!" + "\n" + "\n");
			}
		}

	}

	static void display_menu() {
		System.out.println("   JAVA POLYNOMIAL MINIMIZER (STEEPEST DESCENT)\n"
				+ "E - Enter polynomial function\n"
				+ "F - View polynomial function\n"
				+ "S - Set steepest descent parameters\n"
				+ "P - View steepest descent parameters\n"
				+ "R - Run steepest descent algorithm\n"
				+ "D - Display algorithm performance\n"
				+ "Q - Quit\n");
	}
	
	//Calls and sets the parameters inputed by the user for the polynomial
	public static boolean getPolynomialDetails(Polynomial P) throws NumberFormatException, IOException {
		int n;
		int degree;
		double coefficient=0;
		int i;
		int j;
		
		//ask user for the number of variables
		System.out.print("\n");
		n = getInteger("Enter number of variables (0 to cancel): ", 0, Integer.MAX_VALUE);
		
		//If the user inputs 0, no changes will be made to the polynomial function
		if (n==0) {
			System.out.println("\n" + "Process canceled. No changes made to polynomial function.\n");
		}
		
		//Otherwise, the user continues to input parameters
		else {
			P.setN(n);
	
			degree = getInteger("Enter polynomial degree (0 to cancel): ", 0,Integer.MAX_VALUE);
			
			//If the user inputs 0, no changes will be made to the polynomial function
			if (degree==0) {
				System.out.println("\n" + "Process canceled. No changes made to polynomial function.\n");
				P.setN(0);
			}
			
			//Otherwise, the user continues to input parameters
			else {
				P.setDegree(degree);
				
				//initialize size of the 2d array
				P.init();
				
				//The first loop is to iterate through all the variables 
				for (i=0; i < P.getN(); i++ ) {
					int variable_nb = i+1;
					System.out.print("Enter coefficients for variable x"+ variable_nb +": \n");
					
					//The second loop is to iterate through the coefficients for one variables 
					for (j=0; j < (P.getDegree()+1); j++) {
						int format_j = j+1;
						// Double.MAX_VALUE is equivalent to infinity in the getDouble() function
						coefficient = getDouble("   Coefficient "+ format_j +": ", -Double.MAX_VALUE, Double.MAX_VALUE);
						P.setCoef(i, j, coefficient);
					
					}
				}
				
				System.out.print("\n"+ "Polynomial complete!"+"\n"+"\n");
			}
		}
		return true;
	}
	
	

	//Exit function
	public static void Quit() {
		System.out.println("\n" +"The end.");
	}

	
	//Processing user integer input 
	public static int getInteger(String prompt, int LB, int UB) {
		//integer is initialized to the highest number to pass into the infinite while loop. Once an integer within the proper bounds
		//is inputed, the while loop will be exited and the integer will be returned
		// After every error message integer is reinitialized to Integer.MAX_VALUE so that the while loop is entered once more
		int integer = Integer.MAX_VALUE;
		
		while (integer == Integer.MAX_VALUE ) {
			System.out.print(prompt);
			
			try {
				//the value of integer is replaced by the value of the input by the user 
				integer = Integer.parseInt( cin.readLine() );
				
				//if the integer is outside of the bounds (LB-UB) return error
				if (integer < LB || integer > UB) {
					
					//if UB set is Integer.MAX_VALUE, then return UB to be infinity
					// Two different types of output: 1 if the upper bound is infinity, 2 all other cases
					if (UB==Integer.MAX_VALUE) {
						System.out.printf( "ERROR: Input must be an integer in [%d, infinity]!\n"  +"\n", LB);
						integer = Integer.MAX_VALUE;
					}
					
					else {
						System.out.printf( "ERROR: Input must be an integer in [%d, %d]!\n"+"\n", LB, UB);
						integer = Integer.MAX_VALUE;
				}	
				}
				
				
			//If the input is something else than an integer return an error message
			// Two different types of output: 1 if the upper bound is infinity, 2 all other cases
			} catch (NumberFormatException e) {
				if (UB==Integer.MAX_VALUE) {
					System.out.printf("ERROR: Input must be an integer in [%d, infinity]!\n"+"\n", LB);
					integer = Integer.MAX_VALUE;
				}
				else {
					System.out.printf("ERROR: Input must be an integer in [%d, %d]!\n"+"\n", LB, UB);
					integer = Integer.MAX_VALUE;
				}
				
			} catch (IOException e) {
				if (UB==Integer.MAX_VALUE) {
					System.out.printf("ERROR: Input must be an integer in [%d, infinity]!\n"+"\n", LB);
					integer = Integer.MAX_VALUE;
				}
				else {
					System.out.printf("ERROR: Input must be an integer in [%d, %d]!\n"+"\n", LB, UB);
					integer = Integer.MAX_VALUE;
				}
			}
		}
		return integer;
	}
	


 public static double getDouble(String prompt, double LB, double UB) {
		//the double d is initialized to the highest number to pass into the infinite while loop. Once a double within the proper bounds
		//is inputed, the while loop will be exited and the double will be returned
	 	// After every error message the double d is reinitialized to Double.MAX_VALUE so that the while loop is entered once more
	 	double d = Double.MAX_VALUE;
		
		while (d == Double.MAX_VALUE ) {
			System.out.print(prompt);
			
			try {
				//the value of the double is replaced by the value of the input by the user 
				d = Double.parseDouble( cin.readLine() );
				
				//if the double is outside of the bounds (LB-UB) return error. 
				// Three different types of output: 1 where the lower bound and upper bound is infinity, 2 if the upper bound is infinity 
				// and 3, all other cases
				if (d < LB || d > UB) {
					if (LB ==-Double.MAX_VALUE && UB == Double.MAX_VALUE) {
						System.out.println( "ERROR: Input must be a real number in [-infinity, infinity]!" + "\n" + "\n");
						d = Double.MAX_VALUE;
					}
					else if (UB==Double.MAX_VALUE) {
						System.out.printf("ERROR: Input must be a real number in [%.2f, infinity]!"+ "\n" +"\n", LB);
						d = Double.MAX_VALUE;
					}
					
					else {
						System.out.printf( "ERROR: Input must be a real number in [%.2f, %.2d]!"+ "\n"  + "\n", LB, UB);
						d = Double.MAX_VALUE;
					}
					
				}
			//if input is something else than a double return an error message 
			// Three different types of output: 1 where the lower bound and upper bound is infinity, 2 if the upper bound is infinity 
			// and 3, all other cases
			} catch (NumberFormatException e) {
				if (LB == -Double.MAX_VALUE && UB == Double.MAX_VALUE) {
					System.out.println( "ERROR: Input must be a real number in [-infinity, infinity]!"+  "\n"  );
					d = Double.MAX_VALUE;
				}
				
				else if (UB==Double.MAX_VALUE) {
					System.out.printf("ERROR: Input must be a real number in [%.2f, infinity]!"+ "\n"+ "\n", LB);
					d = Double.MAX_VALUE;
				}
				
				else {
					System.out.printf( "ERROR: Input must be a real number in [%.2f, %.2f]!"+  "\n" , LB, UB);
					d = Double.MAX_VALUE;
				}
				
				
			} catch (IOException e) {
				if (LB ==-Double.MAX_VALUE && UB ==Double.MAX_VALUE) {
					System.out.println( "ERROR: Input must be a real number inn [-infinity, infinity]!"+ "\n"  );
					d = Double.MAX_VALUE;
				}
				
				else if (UB==Double.MAX_VALUE) {
					System.out.printf("ERROR: Input must be a real number in [%.2f, infinity]!"+ "\n" + "\n", LB);
					d = Double.MAX_VALUE;
				}
				
				else {
					System.out.printf( "ERROR: Input must be a real number in [%.2f, %.2f]!"+  "\n", LB, UB);
					
				}
			}
		}
		return d;
	}
 }
	
		
